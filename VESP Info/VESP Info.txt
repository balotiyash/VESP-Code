package com.balotiyash.vespclginfo.view

import android.content.Intent
import android.net.Uri
import androidx.compose.animation.core.tween
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.MarqueeAnimationMode
import androidx.compose.foundation.background
import androidx.compose.foundation.basicMarquee
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.util.lerp
import com.balotiyash.vespclginfo.R
import com.balotiyash.vespclginfo.branchList
import com.balotiyash.vespclginfo.model.clgList
import com.google.accompanist.pager.ExperimentalPagerApi
import com.google.accompanist.pager.HorizontalPager
import com.google.accompanist.pager.HorizontalPagerIndicator
import com.google.accompanist.pager.calculateCurrentOffsetForPage
import com.google.accompanist.pager.rememberPagerState
import kotlinx.coroutines.delay
import java.lang.Thread.yield
import kotlin.math.absoluteValue


@OptIn(ExperimentalFoundationApi::class)
@ExperimentalPagerApi
@Composable
fun ViewPageSlider() {
    //clg image slider 1st part
    val pageState1 = rememberPagerState(
        pageCount = clgList.size,
        initialPage = 0
    )
    LaunchedEffect(Unit) {
        while (true) {
            yield()
            delay(2000)
            pageState1.animateScrollToPage(
                page = (pageState1.currentPage + 1) % (pageState1.pageCount),
                animationSpec = tween(600)
            )
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
//            .background(color = Color(0xFFFEEFCD))
            .background(color = Color.White)
            .verticalScroll(rememberScrollState())
    ) {
//        Spacer(
//            modifier = Modifier
//                .height(30.dp)
//        )


        //moving text animation
        val fontFamily = FontFamily(
            Font(R.font.tenorsans_regular)
        )
        Text(
            text = "Vivekanand Education Society's Polytechnic",
            fontFamily = fontFamily,
            modifier = Modifier
                .basicMarquee(
                    animationMode = MarqueeAnimationMode.Immediately,
                    delayMillis = 1000,
                    iterations = Int.MAX_VALUE,
                    velocity = 80.dp
                )
                .padding(top = 64.dp),
            fontSize = 40.sp,
//            color = Color(0xFF6D4C41),
//            color = Color(0xFFFFC107),
            color = Color.Black,
            fontWeight = FontWeight.Bold
        )
//        Spacer(modifier = Modifier.padding(top = 4.dp))
//        Divider(
//            modifier = Modifier,
//            color = Color.Black,
//            thickness = 2.dp
//        )
        Spacer(modifier = Modifier.padding(top = 10.dp))
        Divider(
            modifier = Modifier
                .padding(horizontal = 20.dp),
            color = Color(0xFF6D4C41),
            thickness = 2.dp
        )
        Spacer(modifier = Modifier.padding(top = 10.dp))

//        Image(
//            painter = painterResource(id = R.drawable.logo_removebg_preview),
//            contentDescription = null,
//            modifier = Modifier
//                .align(alignment = Alignment.CenterHorizontally)
//                .scale(0.8f)
//        )


//        clg image slider 2nd part
        HorizontalPager(
            state = pageState1,
            modifier = Modifier
//                .weight(1f)
                .padding(0.dp, 20.dp, 0.dp, 20.dp)
                .height(204.dp)
        ) { page ->
            Card(
                modifier = Modifier
                    .graphicsLayer {
                        val pageOffset = calculateCurrentOffsetForPage(page).absoluteValue
                        lerp(
                            start = 0.85f,
                            stop = 1f,
                            fraction = 1f - pageOffset.coerceIn(0f, 1f)
                        ).also { scale ->
                            scaleX = scale
                            scaleY = scale
                        }
                        alpha = lerp(
                            start = 0.5f,
                            stop = 1f,
                            fraction = 1f - pageOffset.coerceIn(0f, 1f)
                        )
                    }
                    .fillMaxSize()
                    .padding(25.dp, 0.dp, 25.dp, 0.dp)
                    .border(2.dp, Color(0XFFFEEFCD), RoundedCornerShape(20.dp)),
                shape = RoundedCornerShape(20.dp)
            ) {
                val newClg = clgList[page]
                Box {
                    Image(
                        painter = painterResource(id = newClg.imgUri),
                        contentDescription = "Image",
                        contentScale = ContentScale.Crop,
                        modifier = Modifier
                            .fillMaxSize()
                    )

                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .background(
                                Brush.verticalGradient(
                                    colors = listOf(
                                        Color.Transparent,
                                        Color.Black
                                    ),
                                    startY = 300f
                                )
                            )
                    )

                    Column(
                        modifier = Modifier
                            .align(Alignment.BottomStart)
                            .padding(15.dp)
                    ) {
                        Text(
                            text = newClg.desc,
                            fontSize = 16.sp,
                            color = Color.White,
                            fontWeight = FontWeight.Normal,
                            modifier = Modifier
                        )
                    }
                }
            }
        }


        //image dots
        HorizontalPagerIndicator(
            pagerState = pageState1,
            modifier = Modifier
                .align(Alignment.CenterHorizontally)
                .padding(bottom = 16.dp)
        )


        //1st hedding
        Card(
            modifier = Modifier
                .padding(horizontal = 25.dp)
                .shadow(
                    elevation = 8.dp,
                    shape = RoundedCornerShape(12.dp),
                    clip = true,
                    ambientColor = Color(0xFFFFC107),
                    spotColor = Color.Gray
                )
                .border(2.dp, Color(0xFFFFC107), shape = RoundedCornerShape(12.dp)),
            colors = CardDefaults.cardColors(containerColor = Color(0XFFFEEFCD))
        ) {
            Text(
                text = "ABOUT VESP",
                fontSize = 32.sp,
                color = Color(0xFF6D4C41),
                fontWeight = FontWeight.Bold,
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally)
                    .padding(top = 20.dp)
            )
            Image(
                painter = painterResource(id = R.drawable.divider1_removebg_preview),
                contentDescription = null,
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally)
                    .scale(4f)
            )
            Text(
                text = stringResource(R.string.about_vesp_text),
                textAlign = TextAlign.Justify,
                color = Color.Black,
                modifier = Modifier
                    .padding(start = 25.dp, end = 25.dp, bottom = 20.dp)
            )
        }


        //2nd hedding
        Text(
            text = "DEPARTMENTS",
            fontSize = 32.sp,
            color = Color(0xFF6D4C41),
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .align(alignment = Alignment.CenterHorizontally)
                .padding(top = 40.dp)
        )
        Image(
            painter = painterResource(id = R.drawable.divider1_removebg_preview),
            contentDescription = null,
            modifier = Modifier
                .align(alignment = Alignment.CenterHorizontally)
                .scale(4f)
        )
        val pageState2 = rememberPagerState(
            pageCount = branchList.size,
            initialPage = 0
        )
        LaunchedEffect(Unit) {
            while (true) {
                yield()
                delay(2000)
                pageState2.animateScrollToPage(
                    page = (pageState2.currentPage + 1) % (pageState2.pageCount),
                    animationSpec = tween(600)
                )
            }
        }
        HorizontalPager(
            state = pageState2,
            modifier = Modifier
//                .weight(1f)
                .padding(0.dp, 0.dp, 0.dp, 20.dp)
                .height(300.dp)
        ) { page1 ->
            Card(
                modifier = Modifier
                    .graphicsLayer {
                        val pageOffset = calculateCurrentOffsetForPage(page1).absoluteValue
                        lerp(
                            start = 0.85f,
                            stop = 1f,
                            fraction = 1f - pageOffset.coerceIn(0f, 1f)
                        ).also { scale ->
                            scaleX = scale
                            scaleY = scale
                        }
                        alpha = lerp(
                            start = 0.5f,
                            stop = 1f,
                            fraction = 1f - pageOffset.coerceIn(0f, 1f)
                        )
                    }
                    .fillMaxSize()
                    .padding(25.dp, 0.dp, 25.dp, 0.dp)
                    .shadow(
                        elevation = 8.dp,
                        shape = RoundedCornerShape(20.dp),
                        clip = true,
                        ambientColor = Color(0xFFFFC107),
                        spotColor = Color.Gray
                    ),
                shape = RoundedCornerShape(20.dp),
                colors = CardDefaults.cardColors(containerColor = Color.White)
            ) {
                val newBranch = branchList[page1]
                Box {
                    Image(
                        painter = painterResource(id = newBranch.imgUri),
                        contentDescription = "Image",
                        contentScale = ContentScale.Crop,
                        modifier = Modifier
                            .fillMaxSize()
                            .scale(0.8f)
                    )
                    Column(
                        modifier = Modifier
                            .align(Alignment.BottomCenter)
                            .padding(15.dp)
                    ) {
                        Text(
                            text = newBranch.desc,
                            fontSize = 16.sp,
                            color = Color(0xFF6D4C41),
                            fontWeight = FontWeight.Normal,
                            modifier = Modifier
                        )
                    }
                }
            }
        }
        //image dots
        HorizontalPagerIndicator(
            pagerState = pageState2,
            modifier = Modifier
                .align(Alignment.CenterHorizontally)
                .padding(bottom = 40.dp)
        )



        //3rd hedding
        Card(
            modifier = Modifier
                .padding(horizontal = 25.dp)
                .fillMaxSize()
                .shadow(
                    elevation = 8.dp,
                    shape = RoundedCornerShape(12.dp),
                    clip = true,
                    ambientColor = Color(0xFFFFC107),
                    spotColor = Color.Gray
                )
                .border(2.dp, Color(0xFFFFC107), shape = RoundedCornerShape(12.dp)),
            colors = CardDefaults.cardColors(containerColor = Color(0XFFFEEFCD))
        ) {
            Text(
                text = "CAMPUS PLACEMENT",
                fontSize = 20.sp,
                color = Color(0xFF6D4C41),
                fontWeight = FontWeight.Bold,
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally)
                    .padding(top = 20.dp)
            )
            Box(
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally)
            ) {
                Image(
                    painter = painterResource(id = R.drawable.divider1_removebg_preview),
                    contentDescription = null,
                    modifier = Modifier
                        .align(alignment = Alignment.TopCenter)
                        .scale(4f)
                )
                Image(
                    painter = painterResource(R.drawable.campus_photoroom_png_photoroom),
                    contentDescription = null,
                    modifier = Modifier
//                        .align(alignment = Alignment.CenterHorizontally)
                        .padding(vertical = 40.dp)
                )
            }
        }





        //4th button
        val context = LocalContext.current
        val intent = remember { Intent(Intent.ACTION_VIEW, Uri.parse("https://drive.google.com/file/d/1S59Pwq_rS10D8_kMiJLoZKO2Ss3FLWMO/view?usp=drive_link")) }
        Button(
            onClick = { /*TODO*/
                context.startActivity(intent)
        },
            colors = ButtonDefaults.buttonColors(
                containerColor = Color(0xFFFFC107),
                contentColor = Color(0xFF6D4C41)),
            modifier = Modifier
                .align(alignment = Alignment.CenterHorizontally)
                .padding(top = 20.dp),
        ) {
            Text(
                text = "VESP's Leaflet"
            )
        }



        //5th heding
        Card(
            modifier = Modifier
                .padding(horizontal = 25.dp, vertical = 25.dp)
                .fillMaxSize()
                .shadow(
                    elevation = 8.dp,
                    shape = RoundedCornerShape(20.dp),
                    clip = true,
                    ambientColor = Color(0xFFFFC107),
                    spotColor = Color.Gray
                ),
            colors = CardDefaults.cardColors(containerColor = Color.White)
        ) {

            val context = LocalContext.current

            Text(
                text = "CONTACT US",
                fontSize = 32.sp,
                color = Color(0xFF6D4C41),
                fontWeight = FontWeight.Bold,
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally)
                    .padding(top = 32.dp)
            )
            Image(
                painter = painterResource(id = R.drawable.divider1_removebg_preview),
                contentDescription = null,
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally)
                    .scale(4f)
            )
            var intent = remember { Intent(Intent.ACTION_VIEW, Uri.parse("https://ves.ac.in/polytechnic/")) }
            Image(
                painter = painterResource(id = R.drawable.logo_removebg_preview),
                contentDescription = null,
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally)
                    .scale(0.8f)
                    .clickable { context.startActivity(intent) }
            )
//            Text(
//                text = "Vivekanand Education Society's",
//                fontFamily = fontFamily,
//                modifier = Modifier
//                    .align(alignment = Alignment.CenterHorizontally),
//                fontSize = 18.sp,
//                color = Color(0xFF6D4C41)
//            )
//            Text(
//                text = "Polytechnic",
//                fontFamily = fontFamily,
//                modifier = Modifier
//                    .align(alignment = Alignment.CenterHorizontally),
//                fontSize = 18.sp,
//                color = Color(0xFF6D4C41)
//            )
            Row(
                modifier = Modifier
                    .padding(20.dp)
            ) {
                ContactDetails(
                    R.drawable.location_on_48px,
                    "Sindhi Society, Chembur, Mumbai - 400071", 1,
                    stringResource(R.string.location_url)
                )
            }
            Row(
                modifier = Modifier
                    .padding(20.dp, 0.dp, 20.dp, 16.dp)
            ) {
                ContactDetails(R.drawable.call_48px, "08591983683\n02225227638", 2, "tel:02225227638")
            }
            Row(
                modifier = Modifier
                    .padding(20.dp, 0.dp, 20.dp, 20.dp)
            ) {
                Icon(
                    painter = painterResource(R.drawable.mail_48px),
                    contentDescription = null,
                    tint = Color.Black,
                    modifier = Modifier
                        .scale(0.7f)
                        .padding(end = 12.dp)
                )
                val intent2 = remember { Intent(Intent.ACTION_VIEW, Uri.parse("mailto:principal.vesp@ves.ac.in")) }
                Text(
                    text = "principal.vesp@ves.ac.in",
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier
                        .align(alignment = Alignment.CenterVertically)
                        .clickable { context.startActivity(intent2) },
                    color = Color.Black
                )
            }
            Text(
                text = "Nearest Railway Station",
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally),
                fontWeight = FontWeight.Bold,
                color = Color.Black
            )
            Text(
                text = "Kurla & Chembur\n",
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally),
                color = Color.Black
            )
            Text(
                text = "Nearest Bus Stop",
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally),
                fontWeight = FontWeight.Bold,
                color = Color.Black
            )
            Text(
                text = "Swami Vivekanand Bus Stop",
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally),
                color = Color.Black
            )
            Text(
                text = "Bhakti Bhavan Bus Stop",
                modifier = Modifier
                    .align(alignment = Alignment.CenterHorizontally)
                    .padding(bottom = 20.dp),
                color = Color.Black
            )
        }
        Row(
            modifier = Modifier
                .align(alignment = Alignment.CenterHorizontally)
        ) {
//            Icon(
//                painter = painterResource(id = R.drawable.copyright_48px),
//                contentDescription = null,
//                tint = Color.LightGray,
//                modifier = Modifier
//                    .scale(0.5f)
//            )
            Text(
                text = "© 2022 VES Polytechnic. All Right Reserved.",
                color = Color.LightGray,
                fontSize = 14.sp,
                modifier = Modifier
                    .align(alignment = Alignment.CenterVertically)
                    .padding(bottom = 4.dp)
            )
//            Column {
//                Text(
//                    text = "2022 VES Polytechnic.",
//                    color = Color.LightGray,
//                    fontSize = 12.sp
//                )
//                Text(
//                    text = "All Right Reserved.",
//                    color = Color.LightGray,
//                    fontSize = 12.sp
//                )
//            }
        }
    }
}

@Composable
fun ContactDetails(imgName: Int, desc: String, urlType: Int, urll: String) {
    val context = LocalContext.current
    when (urlType) {
        1 -> {
            val intent = remember { Intent(Intent.ACTION_VIEW, Uri.parse(urll)) }
            Icon(
                painter = painterResource(imgName),
                contentDescription = null,
                tint = Color.Black,
                modifier = Modifier
                    .scale(0.7f)
                    .padding(end = 12.dp)
            )
            Text(
                text = desc,
                fontWeight = FontWeight.Bold,
                color = Color.Black,
                modifier = Modifier
                    .clickable { context.startActivity(intent) }
            )
        }
        2 -> {
            val intent = Intent(Intent.ACTION_DIAL)
            intent.data = Uri.parse(urll)
            Icon(
                painter = painterResource(imgName),
                contentDescription = null,
                tint = Color.Black,
                modifier = Modifier
                    .scale(0.7f)
                    .padding(end = 12.dp)
            )
            Text(
                text = desc,
                fontWeight = FontWeight.Bold,
                color = Color.Black,
                modifier = Modifier
                    .clickable { context.startActivity(intent) }
            )
        }
    }

//    startActivity(intent)
}