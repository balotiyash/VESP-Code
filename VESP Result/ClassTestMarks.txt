package com.balotiyash.vespresult

import android.content.Intent
import android.net.Uri
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Card
import androidx.compose.material.Text
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Divider
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.balotiyash.vespresult.ui.theme.DarkYellow


@Composable
fun PrintCTMarksText(name: String?, code: Int?, m: Int?) {
    Row(
        modifier = Modifier
            .fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        if (name != null) {
            Text(
                text = name,
                fontFamily = fontFamily,
                fontSize = 20.sp
            )
            Text(
                text = "($code)",
                fontSize = 20.sp,
                fontFamily = fontFamily
            )
            Text(
                text = "$m/20",
                fontFamily = fontFamily,
                fontSize = 20.sp
            )
        }
    }
}

@Composable
fun PrintMarks(
    name1: String?, code1: Int?, m1: Int?,
    name2: String?, code2: Int?, m2: Int?,
    name3: String?, code3: Int?, m3: Int?,
    name4: String?, code4: Int?, m4: Int?,
    name5: String?, code5: Int?, m5: Int?,
    name6: String?, code6: Int?, m6: Int?,
    name7: String?, code7: Int?, m7: Int?,
    name8: String?, code8: Int?, m8: Int?,
    name9: String?, code9: Int?, m9: Int?,
    name10: String?, code10: Int?, m10: Int?
) {
    if (name1 != null) {
        PrintCTMarksText(name = name1, code = code1, m = m1)
    }
    if (name2 != null) {
        PrintCTMarksText(name = name2, code = code2, m = m2)
    }
    if (name3 != null) {
        PrintCTMarksText(name = name3, code = code3, m = m3)
    }
    if (name4 != null) {
        PrintCTMarksText(name = name4, code = code4, m = m4)
    }
    if (name5 != null) {
        PrintCTMarksText(name = name5, code = code5, m = m5)
    }
    if (name6 != null) {
        PrintCTMarksText(name = name6, code = code6, m = m6)
    }
    if (name7 != null) {
        PrintCTMarksText(name = name7, code = code7, m = m7)
    }
    if (name8 != null) {
        PrintCTMarksText(name = name8, code = code8, m = m8)
    }
    if (name9 != null) {
        PrintCTMarksText(name = name9, code = code9, m = m9)
    }
    if (name10 != null) {
        PrintCTMarksText(name = name10, code = code10, m = m10)
    }
}

@Composable
fun ClassTestMarksheet(
    ct: Int,
    name1: String?, code1: Int?, m1: Int?,
    name2: String?, code2: Int?, m2: Int?,
    name3: String?, code3: Int?, m3: Int?,
    name4: String?, code4: Int?, m4: Int?,
    name5: String?, code5: Int?, m5: Int?,
    name6: String?, code6: Int?, m6: Int?,
    name7: String?, code7: Int?, m7: Int?,
    name8: String?, code8: Int?, m8: Int?,
    name9: String?, code9: Int?, m9: Int?,
    name10: String?, code10: Int?, m10: Int?,
    urll: String
) {
    val context = LocalContext.current
    val intent = remember { Intent(Intent.ACTION_VIEW, Uri.parse(urll)) }
    var total: Int = 0
    var cnt: Int = 0
    if (m1 != null) {
        total += m1
        cnt++
    }
    if (m2 != null) {
        total += m2
        cnt++
    }
    if (m3 != null) {
        total += m3
        cnt++
    }
    if (m4 != null) {
        total += m4
        cnt++
    }
    if (m5 != null) {
        total += m5
        cnt++
    }
    if (m6 != null) {
        total += m6
        cnt++
    }
    if (m7 != null) {
        total += m7
        cnt++
    }
    if (m8 != null) {
        total += m8
        cnt++
    }
    if (m9 != null) {
        total += m9
        cnt++
    }
    if (m10 != null) {
        total += m10
        cnt++
    }

    val percent = (total * 100) / (cnt * 20)
    Card(
        modifier = Modifier
            .padding(20.dp, 0.dp, 20.dp, 20.dp)
            .shadow(
                elevation = 8.dp,
                shape = RoundedCornerShape(12.dp),
                clip = true,
                ambientColor = Color(0xFFFFC107),
                spotColor = Color.Gray
            )
            .border(2.dp, DarkYellow, shape = RoundedCornerShape(12.dp)),
//        shape = RoundedCornerShape(4.dp)
    ) {
        Box {
            Image(
                painter = painterResource(id = R.drawable.result1),
                contentDescription = null,
                alpha = 0.2f,
                modifier = Modifier
                    .align(alignment = Alignment.Center)
            )
            Column(
                modifier = Modifier
                    .padding(horizontal = 8.dp)
            ) {
                if (ct == 1) {
                    Text(
                        text = "Class Test I", fontSize = 24.sp, modifier = Modifier
                            .align(alignment = Alignment.CenterHorizontally)
                            .padding(top = 8.dp),
                        fontFamily = fontFamily
                    )
                } else if (ct == 2) {
                    Text(
                        text = "Class Test II", fontSize = 24.sp, modifier = Modifier
                            .align(alignment = Alignment.CenterHorizontally)
                            .padding(top = 8.dp),
                        fontFamily = fontFamily
                    )
                }
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                ) {
                    Text(
                        text = "SUBJECTS",
                        fontFamily = fontFamily,
                        fontSize = 20.sp,
                        fontWeight = FontWeight.SemiBold
                    )
                    Row(
                        modifier = Modifier
                            .fillMaxWidth(),
                        horizontalArrangement = Arrangement.End
                    ) {
                        Text(
                            text = "MARKS",
                            fontFamily = fontFamily,
                            fontSize = 20.sp,
                            fontWeight = FontWeight.SemiBold
                        )
                    }
                }
                PrintMarks(
                    name1 = name1, code1 = code1, m1 = m1,
                    name2 = name2, code2 = code2, m2 = m2,
                    name3 = name3, code3 = code3, m3 = m3,
                    name4 = name4, code4 = code4, m4 = m4,
                    name5 = name5, code5 = code5, m5 = m5,
                    name6 = name6, code6 = code6, m6 = m6,
                    name7 = name7, code7 = code7, m7 = m7,
                    name8 = name8, code8 = code8, m8 = m8,
                    name9 = name9, code9 = code9, m9 = m9,
                    name10 = name10, code10 = code10, m10 = m10
                )
                Divider()
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                ) {
                    Text(
                        text = "Total:",
                        fontWeight = FontWeight.SemiBold,
                        fontSize = 20.sp,
                        fontFamily = fontFamily
                    )
                    Row(
                        modifier = Modifier
                            .fillMaxWidth(),
                        horizontalArrangement = Arrangement.End
                    ) {
                        Text(
                            text = "$total/${cnt * 20}",
                            fontFamily = fontFamily,
                            fontSize = 20.sp,
                            fontWeight = FontWeight.SemiBold
                        )
                    }
                }
                Divider()
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                ) {
                    Text(
                        text = "Percentage:",
                        fontWeight = FontWeight.SemiBold,
                        fontSize = 20.sp,
                        fontFamily = fontFamily
                    )
                    Row(
                        modifier = Modifier
                            .fillMaxWidth(),
                        horizontalArrangement = Arrangement.End
                    ) {
                        Text(
                            text = "$percent%",
                            fontFamily = fontFamily,
                            fontSize = 20.sp,
                            fontWeight = FontWeight.SemiBold
                        )
                    }
                }
                Divider()
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                ) {
                    Text(
                        text = "Result:",
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp,
                        fontFamily = fontFamily
                    )
                    Row(
                        modifier = Modifier
                            .fillMaxWidth(),
                        horizontalArrangement = Arrangement.End
                    ) {
                        if (percent < 40) {
                            Text(
                                text = "Fail",
                                fontFamily = fontFamily,
                                fontSize = 20.sp,
                                color = Color.Red
                            )
                        } else {
                            Text(
                                text = "Pass",
                                fontFamily = fontFamily,
                                fontSize = 20.sp,
                                color = DarkYellow
                            )
                        }
                    }
                }
                Button(
                    onClick = { context.startActivity(intent) },
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFFFFC107),
                        contentColor = Color(0xFF6D4C41)
                    ),
                    modifier = Modifier
                        .align(alignment = Alignment.CenterHorizontally)
                        .padding(bottom = 4.dp)
                ) {
                    if (ct == 1) {
                        Text(
                            text = "Download CT1 Result",
                            fontFamily = fontFamily
                        )
                    } else {
                        Text(
                            text = "Download CT2 Result",
                            fontFamily = fontFamily
                        )
                    }
                }
            }
        }
    }
}