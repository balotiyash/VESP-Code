package com.balotiyash.vespnotification

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.balotiyash.vespnotification.ui.theme.VESPNotificationTheme
import org.w3c.dom.Text
import java.text.DateFormat
import java.util.Calendar

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            VESPNotificationTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    NotificationPage()
                }
            }
        }
    }
}

@Composable
fun NotificationPage() {
    Column(
        modifier = Modifier
            .verticalScroll(rememberScrollState())
            .padding(top = 64.dp)
            .background(Color.White)
    ) {
        NotificationCard(
            image = R.drawable.msbte, size = 0.8f,
            desc = "Academic Calendar for Academic Year 2023-24 is now available @MSBTE website.",
            num = 1,
            clktxt = listOf("Click here to download circular."),
            urll = listOf("https://msbte.org.in/file/Academic%20calendar_2023-24_220620231536.pdf"),
            date = "23/06/2023"
        )
        NotificationCard(
            image = R.drawable.logo_removebg_preview, size = 0.8f,
            desc = "Regular classes for II year & III year (ODD-Semester) for the Academic Year 2023-24 are commencing from 24th July 2023.",
            num = 1,
            clktxt = listOf("Click here to download circular."),
            urll = listOf("https://drive.google.com/file/d/1S7ykypBtGR7rZL7Qt-aqwJ-HNZEyfB9q/view?usp=drive_link"),
            date = "06/06/2023"
        )
        NotificationCard(
            image = R.drawable.internship,
            desc = "Internship Student & Mentor List (A.Y. 2022-23)",
            num = 1,
            clktxt = listOf("Click here to download list."),
            urll = listOf("https://docs.google.com/spreadsheets/d/1XAwB4BJiwyeMnzVcuxQvqsDRLSoNQNyudiGZoRAyQt0/edit?usp=sharing"),
            date = "05/06/2023"
        )
        NotificationCard(
            image = R.drawable.logo_removebg_preview, size = 0.8f,
            desc = "All 2023-2024 CO5I student are hereby informed that subject choice for elective subject are given below. You are supposed  to give your elective subject choice on or before 7th June.\n" +
                    "Before given the subject choice , Please check the curricullam of subject.",
            num = 1,
            clktxt = listOf("Click here to fill form."),
            urll = listOf("https://docs.google.com/forms/d/e/1FAIpQLSfira8ppW6MskNNugPgTTGn3lALwOgdtV6N_Y_6XGpvpZIf5g/viewform?usp=pp_url"),
            date = "05/06/2023"
        )
        NotificationCard(
            image = R.drawable.vesp_ad,
            desc = "First year & Direct second year admission started for the academic year 2023-24.",
            num = 3,
            clktxt = listOf(
                "Click here to fill First year admission form.",
                "Click here to fill Direct second year admission form.",
                "Click here to visit college admission page."
            ),
            urll = listOf(
                "https://poly23.dtemaharashtra.gov.in/diploma23/",
                "https://dsd23.dtemaharashtra.gov.in/dsd23/",
                "https://ves.ac.in/polytechnic/admission/"
            ),
            date = "01/06/2023"
        )
        NotificationCard(
            image = R.drawable.mahadbt,
            desc = "Mandatory to fill this MahaDBT 2023-24 form on or before 15/07/2023. Submit one  hard copy to Bagur sir at office. (Only for those students who are willing to apply for scholarship/freeship scheme for the next academic year 2023-24.)",
            num = 1,
            clktxt = listOf("Click here to fill institute level MahaDBT scholarship form."),
            urll = listOf("https://forms.gle/Fx7xoznrvREU44uD7"),
            date = "09/05/2023"
        )
    }
}

@Composable
fun NotificationCard(
    image: Int,
    size: Float = 1f,
    desc: String,
    num: Int,
    clktxt: List<String>?,
    urll: List<String>?,
    date: String
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(20.dp, 0.dp, 20.dp, 20.dp)
    ) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .shadow(
                    elevation = 8.dp,
                    shape = RoundedCornerShape(12.dp),
                    clip = true,
                    ambientColor = Color(0xFFFFC107),
                    spotColor = Color.Gray
                )
                .border(2.dp, Color(0xFFFFC107), shape = RoundedCornerShape(12.dp)),
            colors = CardDefaults.cardColors(containerColor = Color(0XFFFEEFCD))
        ) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .shadow(
                        elevation = 8.dp,
                        shape = RoundedCornerShape(12.dp),
                        clip = true,
                        ambientColor = Color(0xFFFFC107),
                        spotColor = Color.Gray
                    ),
                colors = CardDefaults.cardColors(containerColor = Color.White)
            ) {
                Image(
                    painter = painterResource(image),
                    contentDescription = null,
                    contentScale = ContentScale.Crop,
                    modifier = Modifier
                        .fillMaxWidth()
                        .align(alignment = Alignment.CenterHorizontally)
                        .scale(size)
                )
            }
            Text(
                text = desc,
                textAlign = TextAlign.Justify,
                modifier = Modifier
                    .padding(8.dp, 8.dp, 8.dp, 0.dp),
                color = Color.Black
            )
            if (num != 0) {
                for (i in 0..num-1) {
                    val context = LocalContext.current
                    val intent = remember { Intent(Intent.ACTION_VIEW, Uri.parse(urll!![i])) }
                    Text(
                        text = clktxt!![i],
                        modifier = Modifier
                            .padding(8.dp, 0.dp, 8.dp, 0.dp)
                            .align(alignment = Alignment.CenterHorizontally)
                            .clickable { context.startActivity(intent) },
                        textDecoration = TextDecoration.Underline,
                        color = Color.Blue,
                        textAlign = TextAlign.Center,
                    )
                }
            }
//            else {
//                Spacer(modifier = Modifier.padding(bottom = 8.dp))
//            }
            Text (
                text = date,
                textAlign = TextAlign.Right,
                color = Color.Gray,
                modifier = Modifier
                    .align(alignment = Alignment.End)
                    .padding(end = 8.dp, bottom = 8.dp)
            )
        }
    }
}

@Composable
fun GetDateAndTime() {
    val calender = Calendar.getInstance().time
    val dateFormat = DateFormat.getDateInstance(DateFormat.SHORT).format(calender)
    val timeFormat = DateFormat.getTimeInstance(DateFormat.SHORT).format(calender)
    Row{
        Text(
            text = "$dateFormat",
//            textAlign = TextAlign.Right,
            color = Color.Gray,
            modifier = Modifier
        )
        Text(
            text = "$timeFormat",
            textAlign = TextAlign.Right,
            color = Color.Gray
        )
    }
}

@Preview(
    showBackground = true,
    showSystemUi = true
)
@Composable
fun GreetingPreview() {
    VESPNotificationTheme {
        NotificationPage()
    }
}